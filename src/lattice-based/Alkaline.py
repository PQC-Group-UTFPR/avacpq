# üîê Alkaline: Criptografia P√≥s-Qu√¢ntica Passo a Passo (com Polin√¥mios Bin√°rios)
# Este c√≥digo apresenta uma implementa√ß√£o passo a passo da cifra Alkaline, voltada para ensino e visualiza√ß√£o interativa com mensagens bin√°rias.  
# 
# üéØ Objetivo
# - Entender como funciona a cifra Alkaline
# - Visualizar cada etapa: gera√ß√£o de chave, cifragem, decifragem
# - Observar os efeitos do ru√≠do
#
# üî£ Representa√ß√£o com Polin√¥mios
# 
# A criptografia Alkaline trabalha com polin√¥mios de grau `n - 1`.  
# Cada mensagem, chave ou vetor √© representado como um polin√¥mio:
# - Por exemplo: `m(x) = 1 + x¬≤` vira `[1, 0, 1, 0]`
# - Opera√ß√µes como soma, subtra√ß√£o e multiplica√ß√£o de polin√¥mios s√£o feitas modulo q (aqui `q = 23`)


# Par√¢metros iniciais
import random

n = 4      # Grau do polin√¥mio
k = 2      # Dimens√£o do vetor
q = 23     # M√≥dulo
eta = 1    # Par√¢metro de ru√≠do (binomial centrado)




# ‚öôÔ∏è Fun√ß√µes auxiliares
# 
# Aqui definimos como criar:
# - Erros pequenos (simulando ru√≠do)
# - Polin√¥mios aleat√≥rios
# - As opera√ß√µes b√°sicas com polin√¥mios:
#   - adi√ß√£o, subtra√ß√£o, multiplica√ß√£o
#   - tudo feito mod q, com redu√ß√£o mod x‚Å¥ + 1

def centered_binomial(eta):
    return sum(random.randint(0, 1) - random.randint(0, 1) for _ in range(eta))

def error_poly():
    return [centered_binomial(eta) for _ in range(n)]

def random_poly():
    return [random.randint(0, q - 1) for _ in range(n)]

def poly_add(a, b):
    return [(x + y) % q for x, y in zip(a, b)]

def poly_sub(a, b):
    return [(x - y) % q for x, y in zip(a, b)]

def poly_mul(a, b):
    res = [0] * (2 * n - 1)
    for i in range(n):
        for j in range(n):
            res[i + j] += a[i] * b[j]
    for i in range(n, 2 * n - 1):
        res[i - n] -= res[i]
    return [x % q for x in res[:n]]

# üîë Etapa 1: Gera√ß√£o de Chave
# 
# - Gera-se uma matriz `A` de polin√¥mios aleat√≥rios
# - O segredo `s` √© um vetor com ru√≠do (pequenos inteiros)
# - O erro `e` tamb√©m √© pequeno
# - A chave p√∫blica √©: [t = A¬∑s + e]
# 
# > `A` e `t` s√£o p√∫blicos, `s` √© o segredo privado

def keygen():
    A = [[random_poly() for _ in range(k)] for _ in range(k)]
    s = [error_poly() for _ in range(k)]
    e = [error_poly() for _ in range(k)]
    t = []
    for i in range(k):
        acc = [0] * n
        for j in range(k):
            acc = poly_add(acc, poly_mul(A[i][j], s[j]))
        t.append(poly_add(acc, e[i]))
    return (A, t), s

# ‚úâÔ∏è Etapa 2: Cifragem da Mensagem
# 
# Aretha quer cifrar `m(x)` usando a chave p√∫blica de Bernie.
# 
# Ela gera:
# - Um vetor `r` aleat√≥rio
# - Ru√≠dos `e‚ÇÅ`, `e‚ÇÇ`
# 
# Calcula:
# - u = A·µó¬∑r + e‚ÇÅ
# - v = t·µó ¬∑ r + e‚ÇÇ + ‚é£q/2‚é¶ ¬∑ m
#
# Onde:
# - A: matriz p√∫blica de polin√¥mios
# - t: chave p√∫blica
# - r: vetor aleat√≥rio (ru√≠do)
# - e‚ÇÅ, e‚ÇÇ: ru√≠dos adicionais pequenos
# - m: mensagem como vetor bin√°rio (coeficientes 0 ou 1)
#
# `u` e `v` s√£o enviados para Bernie como o texto cifrado

def encrypt(pubkey, message_poly):
    A, t = pubkey
    r = [error_poly() for _ in range(k)]
    e1 = [error_poly() for _ in range(k)]
    e2 = error_poly()

    u = []
    for i in range(k):
        acc = [0] * n
        for j in range(k):
            acc = poly_add(acc, poly_mul(A[j][i], r[j]))
        u.append(poly_add(acc, e1[i]))

    acc = [0] * n
    for i in range(k):
        acc = poly_add(acc, poly_mul(t[i], r[i]))
    acc = poly_add(acc, e2)
    m_scaled = [(q // 2 * m) % q for m in message_poly]
    v = poly_add(acc, m_scaled)

    return u, v

# üîì Etapa 3: Decifragem da Mensagem
# 
# Bernie usa seu segredo `s` para calcular:
# 
# v-s·µó¬∑u ‚âà ‚é£q/2‚é¶¬∑m
#
# Onde:
# - `s·µó ¬∑ u` estima a parte "secreta" da cifra
# - Se o ru√≠do for pequeno, o resultado pode ser dividido por `‚é£q/2‚é¶` e arredondado
#   para recuperar a mensagem original m.
#
# Isso s√≥ funciona se o ru√≠do for pequeno o suficiente.

def decrypt(privkey, u, v):
    s = privkey
    acc = [0] * n
    for i in range(k):
        acc = poly_add(acc, poly_mul(s[i], u[i]))
    diff = poly_sub(v, acc)
    return [min(1, round(x / (q // 2))) for x in diff]

# ‚úÖ Resultado
# 
# Aqui executamos a cifra completa e imprimimos:
# - Mensagem original
# - Vetores `u`, `v`
# - Produto secreto `s¬∑u`
# - Diferen√ßa `v - s¬∑u`
# - Mensagem decodificada final

m = [random.randint(0, 1) for _ in range(n)]
print("Mensagem bin√°ria original:", m)

pubkey, privkey = keygen()
u, v = encrypt(pubkey, m)
rec = decrypt(privkey, u, v)

print("\nu:")
for i, poly in enumerate(u):
    print(f"u[{i}] =", poly)

print("\nv =", v)
print("\nChave secreta s:")
for i, poly in enumerate(privkey):
    print(f"s[{i}] =", poly)

print("\nMensagem decodificada:", rec)
if m == rec:
    print("‚úÖ A mensagem foi decodificada corretamente!")
else:
    print("‚ùå A mensagem N√ÉO foi decodificada corretamente.")


# ‚ö†Ô∏è Por que a decodifica√ß√£o pode falhar?
# 
# Mesmo quando a mensagem original √© bin√°ria, o processo de decodifica√ß√£o pode n√£o recuperar os mesmos valores. Isso ocorre por dois motivos principais:
# 
# 1. Ru√≠do aleat√≥rio
# 
# Durante a cifragem, somamos erros `e‚ÇÅ`, `e‚ÇÇ` e `s¬∑u`, todos gerados com a fun√ß√£o `centered_binomial(Œ∑)`.
# 
# Embora sejam pequenos (por exemplo, entre -1 e 1), a soma deles pode empurrar o valor final de `v - s¬∑u` para mais longe do que o esperado, levando o arredondamento a produzir:
# 
# - `round(10.8 / 11) = 1` (ok)
# - `round(21.9 / 11) = 2` (erro)
# - `round(-0.5 / 11) = 0` (ok)
# 
# 2. Modularidade (mod q)
# 
# Todos os valores est√£o em um sistema de aritm√©tica modular (mod q). Isso significa que valores "d√£o a volta" ao ultrapassar `q`. Por exemplo:
# 
# - `m = 1 ‚Üí 11`, mas se houver erro: `11 + 11 = 22 ‚Üí round(22 / 11) = 2`
# 
# Esse comportamento √© esperado e faz parte da natureza probabil√≠stica do Alkaline.
